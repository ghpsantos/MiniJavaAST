
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package ams11ghps;

import java_cup.runtime.*;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import ast.*;
import visitor.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\002\004\000\002\002\004\000\002\004" +
    "\004\000\002\004\002\000\002\005\011\000\002\013\004" +
    "\000\002\013\002\000\002\014\004\000\002\014\002\000" +
    "\002\006\005\000\002\003\021\000\002\007\017\000\002" +
    "\015\004\000\002\015\002\000\002\017\003\000\002\017" +
    "\002\000\002\020\005\000\002\020\003\000\002\016\004" +
    "\000\002\010\005\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\011\005\000\002\011\011\000\002" +
    "\011\007\000\002\011\007\000\002\011\006\000\002\011" +
    "\011\000\002\012\004\000\002\012\002\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\006\000\002\021\005\000\002" +
    "\021\010\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\007" +
    "\000\002\021\006\000\002\021\004\000\002\021\005\000" +
    "\002\024\003\000\002\024\002\000\002\022\005\000\002" +
    "\022\003\000\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\206\000\004\005\006\001\002\000\004\002\210\001" +
    "\002\000\006\002\ufffe\005\ufffe\001\002\000\004\052\010" +
    "\001\002\000\004\043\011\001\002\000\042\007\uffcd\024" +
    "\uffcd\025\uffcd\031\uffcd\032\uffcd\033\uffcd\035\uffcd\036\uffcd" +
    "\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\045\uffcd\046" +
    "\uffcd\052\uffcd\001\002\000\004\006\012\001\002\000\004" +
    "\010\013\001\002\000\004\011\014\001\002\000\004\012" +
    "\015\001\002\000\004\041\016\001\002\000\004\050\017" +
    "\001\002\000\004\052\010\001\002\000\004\042\021\001" +
    "\002\000\004\043\022\001\002\000\014\014\026\015\030" +
    "\023\023\043\024\052\010\001\002\000\004\041\133\001" +
    "\002\000\016\014\026\015\030\023\023\043\024\044\uffe3" +
    "\052\010\001\002\000\006\035\117\045\116\001\002\000" +
    "\004\041\112\001\002\000\004\044\110\001\002\000\004" +
    "\041\031\001\002\000\022\021\040\022\034\034\041\041" +
    "\042\051\033\052\010\053\037\054\035\001\002\000\030" +
    "\024\uffd7\025\uffd7\031\uffd7\032\uffd7\033\uffd7\036\uffd7\037" +
    "\uffd7\040\uffd7\042\uffd7\045\uffd7\046\uffd7\001\002\000\030" +
    "\024\uffda\025\uffda\031\uffda\032\uffda\033\uffda\036\uffda\037" +
    "\uffda\040\uffda\042\uffda\045\uffda\046\uffda\001\002\000\006" +
    "\051\102\052\010\001\002\000\030\024\uffd9\025\uffd9\031" +
    "\uffd9\032\uffd9\033\uffd9\036\uffd9\037\uffd9\040\uffd9\042\uffd9" +
    "\045\uffd9\046\uffd9\001\002\000\022\024\045\025\047\031" +
    "\046\032\051\033\052\037\053\042\075\045\050\001\002" +
    "\000\030\024\uffd8\025\uffd8\031\uffd8\032\uffd8\033\uffd8\036" +
    "\uffd8\037\uffd8\040\uffd8\042\uffd8\045\uffd8\046\uffd8\001\002" +
    "\000\030\024\uffd6\025\uffd6\031\uffd6\032\uffd6\033\uffd6\036" +
    "\uffd6\037\uffd6\040\uffd6\042\uffd6\045\uffd6\046\uffd6\001\002" +
    "\000\022\021\040\022\034\034\041\041\042\051\033\052" +
    "\010\053\037\054\035\001\002\000\022\021\040\022\034" +
    "\034\041\041\042\051\033\052\010\053\037\054\035\001" +
    "\002\000\022\024\045\025\047\031\046\032\051\033\052" +
    "\037\053\042\044\045\050\001\002\000\030\024\uffd2\025" +
    "\uffd2\031\uffd2\032\uffd2\033\uffd2\036\uffd2\037\uffd2\040\uffd2" +
    "\042\uffd2\045\uffd2\046\uffd2\001\002\000\022\021\040\022" +
    "\034\034\041\041\042\051\033\052\010\053\037\054\035" +
    "\001\002\000\022\021\040\022\034\034\041\041\042\051" +
    "\033\052\010\053\037\054\035\001\002\000\022\021\040" +
    "\022\034\034\041\041\042\051\033\052\010\053\037\054" +
    "\035\001\002\000\022\021\040\022\034\034\041\041\042" +
    "\051\033\052\010\053\037\054\035\001\002\000\022\021" +
    "\040\022\034\034\041\041\042\051\033\052\010\053\037" +
    "\054\035\001\002\000\022\021\040\022\034\034\041\041" +
    "\042\051\033\052\010\053\037\054\035\001\002\000\006" +
    "\020\055\052\010\001\002\000\004\041\056\001\002\000" +
    "\030\024\uffdc\025\uffdc\031\uffdc\032\uffdc\033\uffdc\036\uffdc" +
    "\037\uffdc\040\uffdc\042\uffdc\045\uffdc\046\uffdc\001\002\000" +
    "\024\021\040\022\034\034\041\041\042\042\uffd0\051\033" +
    "\052\010\053\037\054\035\001\002\000\006\040\063\042" +
    "\uffd1\001\002\000\004\042\062\001\002\000\024\024\045" +
    "\025\047\031\046\032\051\033\052\037\053\040\uffce\042" +
    "\uffce\045\050\001\002\000\030\024\uffdb\025\uffdb\031\uffdb" +
    "\032\uffdb\033\uffdb\036\uffdb\037\uffdb\040\uffdb\042\uffdb\045" +
    "\uffdb\046\uffdb\001\002\000\022\021\040\022\034\034\041" +
    "\041\042\051\033\052\010\053\037\054\035\001\002\000" +
    "\024\024\045\025\047\031\046\032\051\033\052\037\053" +
    "\040\uffcf\042\uffcf\045\050\001\002\000\030\024\uffde\025" +
    "\uffde\031\uffde\032\uffde\033\uffde\036\uffde\037\053\040\uffde" +
    "\042\uffde\045\uffde\046\uffde\001\002\000\030\024\uffdf\025" +
    "\uffdf\031\uffdf\032\uffdf\033\052\036\uffdf\037\053\040\uffdf" +
    "\042\uffdf\045\uffdf\046\uffdf\001\002\000\022\024\045\025" +
    "\047\031\046\032\051\033\052\037\053\045\050\046\070" +
    "\001\002\000\030\024\uffdd\025\uffdd\031\uffdd\032\uffdd\033" +
    "\uffdd\036\uffdd\037\uffdd\040\uffdd\042\uffdd\045\uffdd\046\uffdd" +
    "\001\002\000\026\024\uffe1\031\046\032\051\033\052\036" +
    "\uffe1\037\053\040\uffe1\042\uffe1\045\uffe1\046\uffe1\001\002" +
    "\000\030\024\uffe0\025\uffe0\031\uffe0\032\uffe0\033\052\036" +
    "\uffe0\037\053\040\uffe0\042\uffe0\045\uffe0\046\uffe0\001\002" +
    "\000\030\024\uffe2\025\047\031\046\032\051\033\052\036" +
    "\uffe2\037\053\040\uffe2\042\uffe2\045\uffe2\046\uffe2\001\002" +
    "\000\030\024\uffd3\025\047\031\046\032\051\033\052\036" +
    "\uffd3\037\053\040\uffd3\042\uffd3\045\uffd3\046\uffd3\001\002" +
    "\000\014\014\026\015\030\023\023\043\024\052\010\001" +
    "\002\000\004\016\077\001\002\000\014\014\026\015\030" +
    "\023\023\043\024\052\010\001\002\000\022\014\uffe9\015" +
    "\uffe9\016\uffe9\017\uffe9\023\uffe9\043\uffe9\044\uffe9\052\uffe9" +
    "\001\002\000\004\041\106\001\002\000\004\045\103\001" +
    "\002\000\022\021\040\022\034\034\041\041\042\051\033" +
    "\052\010\053\037\054\035\001\002\000\022\024\045\025" +
    "\047\031\046\032\051\033\052\037\053\045\050\046\105" +
    "\001\002\000\030\024\uffd5\025\uffd5\031\uffd5\032\uffd5\033" +
    "\uffd5\036\uffd5\037\uffd5\040\uffd5\042\uffd5\045\uffd5\046\uffd5" +
    "\001\002\000\004\042\107\001\002\000\030\024\uffd4\025" +
    "\uffd4\031\uffd4\032\uffd4\033\uffd4\036\uffd4\037\uffd4\040\uffd4" +
    "\042\uffd4\045\uffd4\046\uffd4\001\002\000\004\044\111\001" +
    "\002\000\006\002\ufff7\005\ufff7\001\002\000\022\021\040" +
    "\022\034\034\041\041\042\051\033\052\010\053\037\054" +
    "\035\001\002\000\022\024\045\025\047\031\046\032\051" +
    "\033\052\037\053\042\114\045\050\001\002\000\014\014" +
    "\026\015\030\023\023\043\024\052\010\001\002\000\022" +
    "\014\uffe8\015\uffe8\016\uffe8\017\uffe8\023\uffe8\043\uffe8\044" +
    "\uffe8\052\uffe8\001\002\000\022\021\040\022\034\034\041" +
    "\041\042\051\033\052\010\053\037\054\035\001\002\000" +
    "\022\021\040\022\034\034\041\041\042\051\033\052\010" +
    "\053\037\054\035\001\002\000\022\024\045\025\047\031" +
    "\046\032\051\033\052\036\121\037\053\045\050\001\002" +
    "\000\022\014\uffe6\015\uffe6\016\uffe6\017\uffe6\023\uffe6\043" +
    "\uffe6\044\uffe6\052\uffe6\001\002\000\022\024\045\025\047" +
    "\031\046\032\051\033\052\037\053\045\050\046\123\001" +
    "\002\000\004\035\124\001\002\000\022\021\040\022\034" +
    "\034\041\041\042\051\033\052\010\053\037\054\035\001" +
    "\002\000\022\024\045\025\047\031\046\032\051\033\052" +
    "\036\126\037\053\045\050\001\002\000\022\014\uffe5\015" +
    "\uffe5\016\uffe5\017\uffe5\023\uffe5\043\uffe5\044\uffe5\052\uffe5" +
    "\001\002\000\004\044\132\001\002\000\020\014\026\015" +
    "\030\017\uffe3\023\023\043\024\044\uffe3\052\010\001\002" +
    "\000\006\017\uffe4\044\uffe4\001\002\000\022\014\uffea\015" +
    "\uffea\016\uffea\017\uffea\023\uffea\043\uffea\044\uffea\052\uffea" +
    "\001\002\000\022\021\040\022\034\034\041\041\042\051" +
    "\033\052\010\053\037\054\035\001\002\000\022\024\045" +
    "\025\047\031\046\032\051\033\052\037\053\042\135\045" +
    "\050\001\002\000\004\036\136\001\002\000\022\014\uffe7" +
    "\015\uffe7\016\uffe7\017\uffe7\023\uffe7\043\uffe7\044\uffe7\052" +
    "\uffe7\001\002\000\006\002\001\005\141\001\002\000\006" +
    "\002\uffff\005\uffff\001\002\000\004\052\010\001\002\000" +
    "\006\007\143\043\ufffb\001\002\000\004\052\010\001\002" +
    "\000\004\043\145\001\002\000\014\004\ufff9\006\ufff9\044" +
    "\ufff9\051\ufff9\052\ufff9\001\002\000\014\004\152\006\ufff4" +
    "\044\ufff4\051\154\052\010\001\002\000\006\006\163\044" +
    "\162\001\002\000\004\052\uffeb\001\002\000\026\004\ufffa" +
    "\006\ufffa\014\ufffa\015\ufffa\017\ufffa\023\ufffa\043\ufffa\044" +
    "\ufffa\051\ufffa\052\ufffa\001\002\000\004\052\uffed\001\002" +
    "\000\004\052\010\001\002\000\006\045\155\052\uffec\001" +
    "\002\000\004\046\156\001\002\000\004\052\uffee\001\002" +
    "\000\004\036\160\001\002\000\026\004\ufff8\006\ufff8\014" +
    "\ufff8\015\ufff8\017\ufff8\023\ufff8\043\ufff8\044\ufff8\051\ufff8" +
    "\052\ufff8\001\002\000\006\006\ufff5\044\ufff5\001\002\000" +
    "\006\002\ufffd\005\ufffd\001\002\000\010\004\152\051\154" +
    "\052\010\001\002\000\004\052\010\001\002\000\004\041" +
    "\166\001\002\000\012\004\152\042\ufff2\051\154\052\010" +
    "\001\002\000\006\040\205\042\ufff3\001\002\000\006\040" +
    "\ufff0\042\ufff0\001\002\000\004\042\174\001\002\000\004" +
    "\052\010\001\002\000\006\040\uffef\042\uffef\001\002\000" +
    "\004\043\175\001\002\000\022\004\ufff9\014\ufff9\015\ufff9" +
    "\017\ufff9\023\ufff9\043\ufff9\051\ufff9\052\ufff9\001\002\000" +
    "\022\004\152\014\026\015\030\017\uffe3\023\023\043\024" +
    "\051\154\052\010\001\002\000\010\035\117\045\116\052" +
    "\uffeb\001\002\000\004\017\201\001\002\000\022\021\040" +
    "\022\034\034\041\041\042\051\033\052\010\053\037\054" +
    "\035\001\002\000\022\024\045\025\047\031\046\032\051" +
    "\033\052\036\203\037\053\045\050\001\002\000\004\044" +
    "\204\001\002\000\006\006\ufff6\044\ufff6\001\002\000\010" +
    "\004\152\051\154\052\010\001\002\000\006\040\ufff1\042" +
    "\ufff1\001\002\000\004\043\ufffc\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\206\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\004\004\136\001\001\000\004\023\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\026\023\024" +
    "\001\001\000\002\001\001\000\010\011\127\012\126\023" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\021\035\023\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\021\073\023\031\001\001" +
    "\000\006\021\042\023\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\072\023\031\001\001\000\006" +
    "\021\071\023\031\001\001\000\006\021\070\023\031\001" +
    "\001\000\006\021\066\023\031\001\001\000\006\021\065" +
    "\023\031\001\001\000\006\021\064\023\031\001\001\000" +
    "\004\023\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\021\060\022\056\023\031\024\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\063\023\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\075\023\024" +
    "\001\001\000\002\001\001\000\006\011\077\023\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\021\103\023\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\021\112\023\031\001" +
    "\001\000\002\001\001\000\006\011\114\023\024\001\001" +
    "\000\002\001\001\000\006\021\121\023\031\001\001\000" +
    "\006\021\117\023\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\124\023\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\127\012\130\023\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\133" +
    "\023\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\137\001\001\000\002\001\001" +
    "\000\004\023\141\001\001\000\004\013\143\001\001\000" +
    "\004\023\206\001\001\000\002\001\001\000\004\014\145" +
    "\001\001\000\012\006\150\010\152\015\146\023\147\001" +
    "\001\000\004\007\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\156\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\163\023\147\001\001\000\004\023\164" +
    "\001\001\000\002\001\001\000\014\010\171\016\167\017" +
    "\170\020\166\023\147\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\172\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\175\001\001" +
    "\000\014\006\150\010\152\011\127\012\177\023\176\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\201" +
    "\023\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\171\016\205\023\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new AMS11GHPS(f,fis);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }


  protected AMS11GHPS lexer;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Goal ::= MainClassG ClassDeclarationList 
            {
              Program RESULT =null;
		int mcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MainClass mc = (MainClass)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ClassDeclList cdl = (ClassDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Program(mc, cdl);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Goal",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Goal EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ClassDeclarationList ::= ClassDeclarationList ClassDeclaration 
            {
              ClassDeclList RESULT =null;
		int cdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ClassDeclList cdl = (ClassDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ClassDecl cd = (ClassDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		cdl.addElement(cd); RESULT = cdl;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclarationList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ClassDeclarationList ::= 
            {
              ClassDeclList RESULT =null;
		RESULT = new ClassDeclList();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclarationList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ClassDeclaration ::= CLASS IdentifierG TemExtends LKEY VarDeclarationList MethodDeclarationList RKEY 
            {
              ClassDecl RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Identifier id1 = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Identifier te = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		VarDeclList vdl = (VarDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MethodDeclList mdl = (MethodDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		if(te==null)RESULT = new ClassDeclSimple(id1, vdl, mdl);
													else RESULT = new ClassDeclExtends(id1, te, vdl, mdl);
													
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TemExtends ::= EXTENDS IdentifierG 
            {
              Identifier RESULT =null;
		int nomeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nomeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identifier nome = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = nome;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TemExtends",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TemExtends ::= 
            {
              Identifier RESULT =null;
		RESULT = null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TemExtends",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDeclarationList ::= VarDeclarationList VarDeclaration 
            {
              VarDeclList RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarDeclList vdl = (VarDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarDecl vd = (VarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		vdl.addElement(vd);RESULT = vdl;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclarationList",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarDeclarationList ::= 
            {
              VarDeclList RESULT =null;
		RESULT = new VarDeclList();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclarationList",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarDeclaration ::= TypeG IdentifierG SEMI 
            {
              VarDecl RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type tp = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new VarDecl(tp, id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MainClassG ::= CLASS IdentifierG LKEY PUBLIC STATIC VOID MAIN LPAREN STRARG IdentifierG RPAREN LKEY StatementG RKEY RKEY 
            {
              MainClass RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		Identifier id1 = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Identifier id2 = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new MainClass(id1, id2, st);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MainClassG",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MethodDeclaration ::= PUBLIC TypeG IdentifierG LPAREN FormalListG RPAREN LKEY VarDeclarationList StatementListG RETURN Expression SEMI RKEY 
            {
              MethodDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Identifier id1 = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		FormalList fl = (FormalList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		VarDeclList vdl = (VarDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int stlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		StatementList stl = (StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new MethodDecl(t,id1,fl,vdl,stl,ex);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MethodDeclarationList ::= MethodDeclarationList MethodDeclaration 
            {
              MethodDeclList RESULT =null;
		int mdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MethodDeclList mdl = (MethodDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		MethodDecl mt = (MethodDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		mdl.addElement(mt); RESULT = mdl;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclarationList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MethodDeclarationList ::= 
            {
              MethodDeclList RESULT =null;
		RESULT = new MethodDeclList();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclarationList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FormalListG ::= FormalGs 
            {
              FormalList RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FormalList fl = (FormalList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = fl;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalListG",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FormalListG ::= 
            {
              FormalList RESULT =null;
		RESULT = new FormalList();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalListG",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FormalGs ::= FormalGs COMMA FormalG 
            {
              FormalList RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		FormalList fs = (FormalList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Formal fg = (Formal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		fs.addElement(fg); RESULT = fs;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalGs",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FormalGs ::= FormalG 
            {
              FormalList RESULT =null;
		int fgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Formal fg = (Formal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new FormalList(); RESULT.addElement(fg);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalGs",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FormalG ::= TypeG IdentifierG 
            {
              Formal RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Formal(t,id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalG",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TypeG ::= INT LBRACK RBRACK 
            {
              Type RESULT =null;
		RESULT = new IntArrayType();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeG",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TypeG ::= BOOLEAN 
            {
              Type RESULT =null;
		RESULT = new BooleanType();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeG",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TypeG ::= INT 
            {
              Type RESULT =null;
		RESULT = new IntegerType();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeG",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TypeG ::= IdentifierG 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new IdentifierType(id.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeG",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // StatementG ::= LKEY StatementListG RKEY 
            {
              Statement RESULT =null;
		int stlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementList stl = (StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Block(stl);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementG",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // StatementG ::= IF LPAREN Expression RPAREN StatementG ELSE StatementG 
            {
              Statement RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int st1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int st1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement st1 = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int st2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int st2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement st2 = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new If(ex, st1, st2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementG",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // StatementG ::= WHILE LPAREN Expression RPAREN StatementG 
            {
              Statement RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new While(ex,st);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementG",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // StatementG ::= PRINT LPAREN Expression RPAREN SEMI 
            {
              Statement RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new Print(ex);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementG",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // StatementG ::= IdentifierG ASSIGN Expression SEMI 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Assign(id, ex);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementG",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // StatementG ::= IdentifierG LBRACK Expression RBRACK ASSIGN Expression SEMI 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp ex1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp ex2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new ArrayAssign(id, ex1, ex2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementG",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // StatementListG ::= StatementG StatementListG 
            {
              StatementList RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatementList sl = (StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		sl.addElement(st); RESULT = sl;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementListG",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // StatementListG ::= 
            {
              StatementList RESULT =null;
		RESULT = new StatementList();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementListG",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Expression ::= Expression AND Expression 
            {
              Exp RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp ex1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp ex2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new And(ex1, ex2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Expression ::= Expression LESSTHAN Expression 
            {
              Exp RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp ex1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp ex2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new LessThan(ex1, ex2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expression ::= Expression PLUS Expression 
            {
              Exp RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp ex1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp ex2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Plus(ex1, ex2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expression ::= Expression MINUS Expression 
            {
              Exp RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp ex1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp ex2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Minus(ex1, ex2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expression ::= Expression TIMES Expression 
            {
              Exp RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp ex1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp ex2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Times(ex1, ex2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expression ::= Expression LBRACK Expression RBRACK 
            {
              Exp RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp ex1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp ex2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new ArrayLookup(ex1, ex2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expression ::= Expression DOT LENGTH 
            {
              Exp RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp ex1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new ArrayLength(ex1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expression ::= Expression DOT IdentifierG LPAREN TemParametro RPAREN 
            {
              Exp RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Exp ex1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpList tp = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Call(ex1,id,tp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expression ::= INT 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new IntegerLiteral(n);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expression ::= TRUE 
            {
              Exp RESULT =null;
		RESULT = new True();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expression ::= FALSE 
            {
              Exp RESULT =null;
		RESULT = new False();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expression ::= IdentifierG 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new IdentifierExp(id.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expression ::= THIS 
            {
              Exp RESULT =null;
		RESULT = new This();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expression ::= NEW INT LBRACK Expression RBRACK 
            {
              Exp RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new NewArray(ex);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expression ::= NEW IdentifierG LPAREN RPAREN 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new NewObject(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expression ::= NOT Expression 
            {
              Exp RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Not(ex);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expression ::= LPAREN Expression RPAREN 
            {
              Exp RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = ex;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TemParametro ::= ExpressionList 
            {
              ExpList RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = el;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TemParametro",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TemParametro ::= 
            {
              ExpList RESULT =null;
		RESULT = new ExpList();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TemParametro",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ExpressionList ::= ExpressionList COMMA Expression 
            {
              ExpList RESULT =null;
		int exsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpList exs = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		exs.addElement(ex); RESULT = exs;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionList",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ExpressionList ::= Expression 
            {
              ExpList RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExpList();RESULT.addElement(ex);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionList",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IdentifierG ::= IDENTIFIER 
            {
              Identifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Identifier(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierG",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
